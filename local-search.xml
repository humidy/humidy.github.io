<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>打造一间自己的书社</title>
    <link href="/2023/07/12/%E4%BA%BA%E7%94%9F%E5%A6%82%E4%B9%A6%E6%9F%9C/"/>
    <url>/2023/07/12/%E4%BA%BA%E7%94%9F%E5%A6%82%E4%B9%A6%E6%9F%9C/</url>
    
    <content type="html"><![CDATA[<div class="note note-success">            <p>我的个人书单——自我知识体系的构建</p>          </div><span class="label label-info">[分类]:传记（ZJ）</span><table><thead><tr><th>编号</th><th style="text-align:center">书名</th><th style="text-align:center">ISBN</th><th style="text-align:center">开始时间</th><th style="text-align:center">结束时间</th></tr></thead><tbody><tr><td>ZJ0001</td><td style="text-align:center">《这就是马云》</td><td style="text-align:center">9787213085895</td><td style="text-align:center">2023-7</td><td style="text-align:center">2023-7</td></tr><tr><td>ZJ0002</td><td style="text-align:center">《快手：被看见的力量》</td><td style="text-align:center">9787521711639</td><td style="text-align:center">2023-7</td><td style="text-align:center">2023-7</td></tr></tbody></table><div class="note note-secondary">            <p>【一句话感悟】《这就是马云》：平凡人的不平凡人生，马老师的独特个人魅力不仅浸染了身边的人，给阿里巴巴注入了独有的Aliway，还影响了中国整个互联网行业和中国的商业圈以及伴随阿里巴巴成长的一代电商从业者。</p>          </div><div class="note note-secondary">            <p>【一句话感悟】《快手：被看见的力量》：被看见的力量，从解决注意力鸿沟，让社会变得更好，增强人们幸福感等多个维度更新大家对快手的认知，不再是之前做GIF动图的工具产品也不仅是大家普遍认知的短视频平台公司，而是一家将AI技术深入产品骨髓，以AI为核心技术的科技公司。致力于普惠大众，让更多的人被看见、被欣赏、被关注，从而影响这些人的生活。</p>          </div><span class="label label-info">[分类]:意识（YS）</span><table><thead><tr><th>编号</th><th style="text-align:center">书名</th><th style="text-align:center">ISBN</th><th style="text-align:center">开始时间</th><th style="text-align:center">结束时间</th></tr></thead><tbody><tr><td>YS0001</td><td style="text-align:center">《刻意练习-如何从新手到大师》</td><td style="text-align:center">9787111551287</td><td style="text-align:center">2023-7</td><td style="text-align:center">2023-8</td></tr></tbody></table><div class="note note-secondary">            <p>【一句话感悟】</p>          </div><span class="label label-info">[分类]:方法（FF）</span><table><thead><tr><th>编号</th><th style="text-align:center">书名</th><th style="text-align:center">ISBN</th><th style="text-align:center">开始时间</th><th style="text-align:center">结束时间</th></tr></thead><tbody><tr><td>FF0001</td><td style="text-align:center">《如何阅读一本书》</td><td style="text-align:center">9787100106184</td><td style="text-align:center">2023-7</td><td style="text-align:center">2023-8</td></tr></tbody></table><div class="note note-secondary">            <p>【一句话感悟】</p>          </div>]]></content>
    
    
    <categories>
      
      <category>感悟</category>
      
    </categories>
    
    
    <tags>
      
      <tag>读书</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>读书笔记-代码整洁之道（更新...）</title>
    <link href="/2023/07/09/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0-%E4%BB%A3%E7%A0%81%E6%95%B4%E6%B4%81%E4%B9%8B%E9%81%93/"/>
    <url>/2023/07/09/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0-%E4%BB%A3%E7%A0%81%E6%95%B4%E6%B4%81%E4%B9%8B%E9%81%93/</url>
    
    <content type="html"><![CDATA[<h2 id="程序员的职业素养">程序员的职业素养</h2><p>  这是一本写给专业的软件工程师的书籍，虽然自己不是专业的程序员，但生在互联网公司，<br>也经常自己写些代码，想成为专业的程序员，但始终不得软件工程的要领，却非常好奇，<br>需要了解这个职业的成长之路。为自己的职业新增更多的可能性。</p><h2 id="第一章：专业主义">第一章：专业主义</h2><h3 id="理解专业主义">理解专业主义</h3><p>  专业主义不但象征着荣誉与骄傲，而且明确意味着责任与义务；专业主义的精髓就在于<br>将公司利益视同个人利益，强调的是一个担当责任。</p><h3 id="担当责任">担当责任</h3><p>  担当责任让我们在专业技能的背景下，遵循专业的方式方法，坚守专业的原则，不做一些违背专业素养的事情<br>比如没有对例行程序进行测试就交付软件。</p><h3 id="如何承担责任">如何承担责任</h3><p>  让我们编写的软件保持良好的功能。作为专业人士，不能留下明显的bug，在发布后，面对出现的bug，要对自己的不完美负责。需要练习的第一件事情就是&quot;道歉&quot;，学会道歉，并反思总结。</p><blockquote><ol><li>尽量让QA顺利通过测试。故意发送明知有缺陷的代码，这种做法是极其不专业的。每次QA甚至用户找出问题，都应该羞愧，并决心以此为戒。</li><li>要确信代码正常运行。要做的就是测试，使出浑身解数来测试，而且需要实行自动化测试，代码全部需要测试。</li><li>强调要采用自动化测试</li></ol></blockquote><p>  让我们编写的软件保持良好的结构。结构良好的代码灵活、易于修改。</p><p>  如果你希望自己的软件灵活可变，那就应该时常修改它。</p><h3 id="职业道德">职业道德</h3><p>  职业发展是你自己的事，你需要在工作之余，保持勤勉，花时间去不断提升你的职业能力，比如每周工作60小时，前40小时是给雇主的，后20小时是给自己的。</p><p>  或许你会觉得这样做只会让人尽力枯竭。恰恰相反，这样做其实能让你免于枯竭匮乏。</p><h3 id="了解你的领域">了解你的领域</h3><p>  作为专业人士，你需要了解这个领域中的各种观点、实践、技术、工具与术语。下面列出了每个专业软件开发人员必须精通的事项：</p><blockquote><ul><li>设计模式。必须能描述GOF书中的全部24种模式，同时还要有POSA书中的多数模式的实战经验。</li><li>设计原则。必须了解SOLID原则，而且要深刻理解组件设计原则。</li><li>方法。必须理解XP、Scrum、精益、看板、瀑布、结构化分析及结构化设计等。</li><li>实践。必须掌握测试驱动开发、面向对象设计、结构化编程、持续集成和结对编程。</li><li>工件。必须了解如何使用UML图、DFD图、结构图、Petri图、状态迁移图表、流程图和决策表。</li></ul></blockquote><h3 id="坚持学习">坚持学习</h3><p>  坚持广泛的学习，读书、看相关文章、关注博客和微博、参加技术大会、访问用户群、多参与读书与学习小组。不懂就学，不要畏难。</p><h3 id="练习">练习</h3><p>  和职业运动员一样，专业的软件工程师也需要不断练习。练习，指的是在日常工作之余专门练习技能，以期自我提升。<br>技巧是重复做一些简单的练习。</p><h3 id="合作">合作</h3><p>  专业软件开发人员会更加努力地尝试与他人一起编程、一起练习、一起设计、一起计划。这里需要指明并不是让你花全部时间一直和别人共事，独处的时间也很重要。</p><h3 id="辅导">辅导</h3><p>  想迅速牢固地掌握某些事实和观念，最好的办法就是与你负责指导的人交流这些内容。</p><h3 id="了解业务领域">了解业务领域</h3><p>  开始一个新领域的项目时，应该读一两本该领域相关的书，要就该领域的基础架构与基本知识做客户和用户访谈，还应当花时间和业内专家交流，了解他们的原则与价值观念。</p><h3 id="与雇主-客户保持一致">与雇主/客户保持一致</h3><p>  雇主的问题就是你的问题，每次开发系统，都应该站在雇主的角度来思考，确保开发的功能真正能满足雇主的需要。</p><h3 id="谦逊">谦逊</h3><p>  编程是一种创造性活动。编程也是及其自负的行为。专业人士都清楚自己的自负，也知道上天会注意到这种自负，并加以惩戒。如果真遭遇挫折，最好的办法就是，照照镜子，看到镜子中那个自负的傻瓜正在对着自己笑。</p><h2 id="附录：参考工具集">附录：参考工具集</h2><section class="footnotes"><div class="footnote-list"><ol><li><span id="fn:1" class="footnote-text"><span>源代码控制工具<a href="#fnref:1" rev="footnote" class="footnote-backref"> ↩</a></span></span></li><li><span id="fn:2" class="footnote-text"><span>集成开发环境/编辑器<a href="#fnref:2" rev="footnote" class="footnote-backref"> ↩</a></span></span></li><li><span id="fn:3" class="footnote-text"><span>问题跟踪<a href="#fnref:3" rev="footnote" class="footnote-backref"> ↩</a></span></span></li><li><span id="fn:4" class="footnote-text"><span>持续构建<a href="#fnref:4" rev="footnote" class="footnote-backref"> ↩</a></span></span></li><li><span id="fn:5" class="footnote-text"><span>单元测试工具<a href="#fnref:5" rev="footnote" class="footnote-backref"> ↩</a></span></span></li><li><span id="fn:6" class="footnote-text"><span>组件测试工具<a href="#fnref:6" rev="footnote" class="footnote-backref"> ↩</a></span></span></li><li><span id="fn:7" class="footnote-text"><span>集成测试工具<a href="#fnref:7" rev="footnote" class="footnote-backref"> ↩</a></span></span></li><li><span id="fn:8" class="footnote-text"><span>UML/MDA<a href="#fnref:8" rev="footnote" class="footnote-backref"> ↩</a></span></span></li></ol></div></section>]]></content>
    
    
    <categories>
      
      <category>读书笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>读书</tag>
      
      <tag>程序员</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>怀旧_写在2017年</title>
    <link href="/2023/07/08/%E6%80%80%E6%97%A7-%E5%86%99%E5%9C%A82017%E5%B9%B4/"/>
    <url>/2023/07/08/%E6%80%80%E6%97%A7-%E5%86%99%E5%9C%A82017%E5%B9%B4/</url>
    
    <content type="html"><![CDATA[<h2 id="记忆中的2017年">记忆中的2017年</h2><blockquote><p>  从2010年参加工作至2017年已有7个年头，按照李笑来的说法，七年是一辈子，需要新生。在这一辈子(7年)的末尾，我也已越过三十而立的年龄，也被传染似的体会着中年危机带来的冲击。作为一名没有经历程序猿进化的架构师，已经在这个岗位工作了5年有余，但有时心理或多或少还是底气不足，虽然天天领着一帮程序猿攻城拔寨，但要彻底融会贯通还缺一个切身的体会和真实的感悟，于是，作为老男孩的我，希望在新生中（接下来的7年），补上这一课，成为一名合格的程序猿，哈哈，这听上去有点可笑，不，这就是我的人生。入行（程序猿）最好的方式是践行这个行业牛人的做法，写博客是必不可少的一个工具（貌似很多年前就有人让我写，我无知不屑无情的拒绝）。记录作为一个老男孩的程序猿回炉熔炼之路。</p></blockquote><p>  最后，附上乔纳森·丹尼可（Jonathan Danylko）对程序员编程的经验总结（非常认同，苦于能力经验有限，只能引用借鉴），以此为序，开启一名大龄程序猿的新生</p><h2 id="20条程序员专业经验">20条程序员专业经验</h2><h3 id="1-估算解决问题所需要的时间">1. 估算解决问题所需要的时间</h3><blockquote><p>  不要怕，承认吧！我曾见过一些程序员为了解决一个特殊问题而坐在显示器前面8小时。为自己定一个时间限制吧，1小时、30分钟或甚至15分钟。如果在这期间你不能解决问题，那就去寻求帮助，或到网上找答案，而不是尝试去做“超级堆码员”。</p></blockquote><h3 id="2-随着时光推移，只要你理解了一种语言的原理，你会发现各种语言之间的相似之处">2. 随着时光推移，只要你理解了一种语言的原理，你会发现各种语言之间的相似之处</h3><blockquote><p>  你所选择的语言，你应该觉得“舒服”，并且能够写出有效（而且简洁）的代码。最重要的，让语言去适应项目，反之亦然。</p></blockquote><h3 id="3-不要过于注重程序的“设计模式”">3. 不要过于注重程序的“设计模式”</h3><blockquote><p>  有时候，写一个简单的算法，要比引入某种模式更容易。在多数情况下，程序代码应是简单易懂，甚至清洁工也能看懂。</p></blockquote><h3 id="4-经常备份代码">4. 经常备份代码</h3><blockquote><p>  在我年轻时，我就有过因硬盘故障而丢了大量代码的经历，这经历很恐怖的。只要你一次没有备份，就应当像有着严格的期限，客户明天就需要。此时就该源码/版本控制软件大显身手了。</p></blockquote><h3 id="5-承认自己并不是最顶尖的程序员-–-知不足">5. 承认自己并不是最顶尖的程序员 – 知不足</h3><blockquote><p>  我常想，我对编程了解已足够多，但是总有其他人比你优秀。正所谓，“一山总比一山高”。所以，向他们看齐吧！</p></blockquote><h3 id="6-学习、学习再学习">6. 学习、学习再学习</h3><blockquote><p>  正如第5点所说，我经常会在手里拿一本计算机或编程相关的杂志或书（不信，可以问我的朋友）。诚然，总有很多你不知道的技术，你可以从中学习以保持不落后。如果你有一种灵巧的方式来获取你需要的新技术，那你每天都应该坚持学习。</p></blockquote><h3 id="7-永恒的变化">7. 永恒的变化</h3><blockquote><p>  你对待技术/编程知识，就应像你对待股票一样：多样化。不要在某一特定技术上自我感觉良好。如果那种技术或语言已经没有足够支持，那你还不如现在就开始更新你的简历，并启动培训新计划。我能保持前行的主要原则是什么呢？至少了解两到三种语言，所以，如果某种语言过时了，你在学习新技术的时候还可以依靠另一种语言。</p></blockquote><h3 id="8-提携新人">8. 提携新人</h3><blockquote><p>  协助并且培养初级/入门的开发人员学习优秀的编程方法和技巧。也许你还不知道，在帮助他们向更高一层前进时，你自己也在向更高一层提升，你会更加自信。</p></blockquote><h3 id="9-简化算法">9. 简化算法</h3><blockquote><p>  代码如恶魔，在你完成编码后，应回头并且优化它。从长远来看，这里或那里一些的改进，会让后来的支持人员更加轻松。</p></blockquote><h3 id="10-编写文档">10. 编写文档</h3><blockquote><p>  无论是Web服务的API，还是一个简单的类，你尽量编写相应文档。我曾经引以为豪的代码注释，因过度注释而有人指责。给三行代码加一行注释，只需要你几秒时间。如果那是一个比较难以理解的技术，千万别担心过多注释。如果你能很好做好自己的工作，大多数架构师、后备程序员、支持组都会感激你。</p></blockquote><h3 id="11-测试、测试再测试">11. 测试、测试再测试</h3><blockquote><p>  我是一名黑盒测试粉丝。当你完成编码后，你“被认可”的时候就开始了。如果你们公司有QA部门，如果你的代码中有错误，那你得到的评论，会比项目经理还多。如果你不彻底测试自己的代码，那恐怕你开发的就不只是代码，可能还会声名狼藉。</p></blockquote><h3 id="12-庆祝每一次成功">12. 庆祝每一次成功</h3><blockquote><p>  我见过很多程序员在解决编程技术难题后，会和同伴握手、击掌或甚至手舞足蹈。每个人在生命中都会碰到“顿悟”。如果一个程序员高兴地跑来叫你去看他的非凡代码，也许你已经看过这样的代码100遍了，但你也应该为了这个家伙而庆祝第101次。</p></blockquote><h3 id="13-经常检查代码">13. 经常检查代码</h3><blockquote><p>  在公司，你的代码要经常检查（包括自查和其他同事检查）。不要把别人的检查，看成是对代码风格的苛求。应该把它们看作是有建设性的批评。对个人来说，经常检查你的代码并且自问，“我怎样才能写得更好呢？” 这会加速你的成长，让你成为一个更优秀的程序员。</p></blockquote><h3 id="14-回顾你的代码">14. 回顾你的代码</h3><blockquote><p>  在看到自己以前的代码时，通常会有两种方式：“难以至信，这代码是我写的？”和“难以至信，这代码是我写的！”。第一种往往是厌恶的语气，并在想如何改进它。你也许会惊叹，旧代码也能复活成为一种更好的程序，甚至是一个完整的产品。第二种通常带着惊奇和成就感。开发人员应该一到两个自己完成的项目成果，能让众人不禁而立并注目而观的项目。同样，基于你优越的编程能力，你可以把过去的程序或项目拿出来，把它们更新为更加优秀的产品或想法。</p></blockquote><h3 id="15-幽默是不可缺的">15. 幽默是不可缺的</h3><blockquote><p>  在我20年的开发生涯中，我还没有碰到哪位程序员是没有幽默感的。实际上，干我们这行，幽默是一项必备品。</p></blockquote><h3 id="16-谨防那些无所不知的程序员，不愿分享的程序员，还有经验不足的程序员">16.谨防那些无所不知的程序员，不愿分享的程序员，还有经验不足的程序员</h3><blockquote><p>  t5当你遇到这几种程序员时，你自己要谦虚。无所不知的程序员，更想当一个英雄而不是团队成员；保守的程序员则是在编写着他们独享的代码；而经验不足的程序员则会每十分钟就来问你一下，当代码完成后，代码已经是你的，而不是他们。</p></blockquote><h3 id="17-任何项目都不会那么简单">17. 任何项目都不会那么简单</h3><blockquote><p>  朋友、家人和同事曾请求我仓促做一些事情，仓促做一个程序或者网站。对于这样的事，应该从双方做计划，才能做出令双方都会满意的东西。如果某人起初只是需要一个使用 Microsoft Access的、只有3个页面的网站，但未来就很可能变成一个有15个页面的网站，并使用SQL Server，有一个论坛，还有一个定制的CMS（内容管理系统）。</p></blockquote><h3 id="18-任何时候不要想当然">18. 任何时候不要想当然</h3><blockquote><p>  假如你承接一个简单的项目，你可能会认为某个部分可以轻松完成。千万别这样想！除非你有一个类、组件、或者一段已经写好的代码，并且在现有的项目已经测试通过。不要认为这将是很容易的。</p></blockquote><h3 id="19-从来没有已经做完的软件">19.从来没有已经做完的软件</h3><blockquote><p>  曾经有一位程序员告诉我，没有软件是已经完成的，它只是“暂时完成了”。这是明智的忠告。如果客户还在使用你写的程序，并经受了时间的考验。如果有机会，你仍在更新它，这并不是什么坏事，这让你不断地前行。</p></blockquote><h3 id="20-耐心是一种美德">20. 耐心是一种美德</h3><blockquote><p>  当客户、朋友或家庭成员用电脑的时候，他们也许会受挫，进而想砸电脑，或气冲冲地离开。我一直在告诉他们，“是你掌控电脑，不是电脑掌控你。”对于用作编程的电脑，你要有一定的耐心。一旦程序员知道问题所在后，他们就会站在电脑的角度看问题，并且说“哦，这就是为什么它是这样做。”</p></blockquote>]]></content>
    
    
    <categories>
      
      <category>感悟</category>
      
    </categories>
    
    
    <tags>
      
      <tag>自己</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
